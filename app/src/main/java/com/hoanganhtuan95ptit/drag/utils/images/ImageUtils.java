package com.hoanganhtuan95ptit.drag.utils.images;import android.content.Context;import android.content.pm.ApplicationInfo;import android.graphics.Bitmap;import android.graphics.drawable.Drawable;import android.net.Uri;import android.widget.ImageView;import com.bumptech.glide.Glide;import com.bumptech.glide.load.Transformation;import com.bumptech.glide.load.engine.DiskCacheStrategy;import com.bumptech.glide.request.RequestOptions;import java.io.File;import androidx.annotation.DrawableRes;import static com.bumptech.glide.load.resource.bitmap.BitmapTransitionOptions.withCrossFade;public class ImageUtils {    public static void showImage(Context context, ImageView imageView, ApplicationInfo applicationInfo, int width, int height, Transformation<Bitmap>... transformations) {        Glide.with(context)                .asDrawable()                .apply(new RequestOptions().override(width, height))                .transition(com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions.withCrossFade(500))                .transform(transformations)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .load(applicationInfo)                .into(imageView);    }    public static void showImage(Context context, ImageView imageView, Drawable drawable, Transformation<Bitmap>... transformations) {        Glide.with(context)                .asDrawable()                .transition(com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions.withCrossFade(500))                .transform(transformations)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .load(drawable)                .into(imageView);    }    public static void showImage(Context context, ImageView imageView, Drawable drawable, int width, int height, Transformation<Bitmap>... transformations) {        Glide.with(context)                .asDrawable()                .apply(new RequestOptions().override(width, height))                .transition(com.bumptech.glide.load.resource.drawable.DrawableTransitionOptions.withCrossFade(500))                .transform(transformations)                .load(drawable)                .into(imageView);    }    public static void showImage(Context context, ImageView imageView, @DrawableRes int thumb, Transformation<Bitmap>... transformations) {        Glide.with(context)                .asBitmap()                .transition(withCrossFade(500))                .transform(transformations)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .load(thumb)                .into(imageView);    }    public static void showImage(Context context, ImageView imageView, @DrawableRes int thumb, int width, int height, Transformation<Bitmap>... transformations) {        Glide.with(context)                .asBitmap()                .apply(new RequestOptions().override(width, height))                .transition(withCrossFade(500))                .transform(transformations)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .load(thumb)                .into(imageView);    }    public static void showImage(Context context, ImageView imageView, String url, Transformation<Bitmap>... transformations) {        Glide.with(context)                .asBitmap()                .transition(withCrossFade(500))                .transform(transformations)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .load(url)                .into(imageView);    }    public static void showImage(Context context, ImageView imageView, String thumb, String url, Transformation<Bitmap>... transformations) {        Glide.with(context)                .asBitmap()                .thumbnail(Glide.with(context).asBitmap().load(thumb))                .transition(withCrossFade(500))                .transform(transformations)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .load(url)                .into(imageView);    }    public static void showImage(Context context, ImageView imageView, String url, int width, int height, Transformation<Bitmap>... transformations) {        Glide.with(context)                .asBitmap()                .apply(new RequestOptions().override(width, height))                .transition(withCrossFade(500))                .transform(transformations)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .load(url)                .into(imageView);    }    public static void showVideo(Context context, ImageView imageView, String url, Transformation<Bitmap>... transformations) {        showVideo(context, imageView, url, imageView.getWidth(), imageView.getHeight(), transformations);    }    public static void showVideo(Context context, ImageView imageView, String url, float width, float height, Transformation<Bitmap>... transformations) {        showVideo(context, imageView, url, (int) width, (int) height, transformations);    }    public static void showVideo(Context context, ImageView imageView, String url, int width, int height, Transformation<Bitmap>... transformations) {        Glide.with(context)                .asBitmap()                .apply(new RequestOptions().override(width, height))                .transition(withCrossFade(500))                .transform(transformations)                .diskCacheStrategy(DiskCacheStrategy.NONE)                .load(Uri.fromFile(new File(url)))                .into(imageView);    }}